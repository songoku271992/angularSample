import { Component, ContentChild, ChangeDetectionStrategy, Input, Output, EventEmitter, ElementRef, Renderer2, ChangeDetectorRef, ViewChild } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/skip';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/switchMap';
import 'rxjs/add/operator/publish';
import { NglLookupItemTemplate, NglLookupLabelTemplate } from './item';
import { NglLookupScopeItem } from './scope-item';
import { uniqueId, isObject } from '../util/util';
var NglLookup = (function () {
    function NglLookup(element, renderer, detector) {
        this.element = element;
        this.renderer = renderer;
        this.detector = detector;
        this.noResultsText = 'No results found';
        this.searchIcon = true;
        this.openScope = false;
        this.valueChange = new EventEmitter();
        this.pickChange = new EventEmitter();
        this.debounce = 200;
        this.inputId = uniqueId('lookup_input');
        this.globalClickUnsubscriber = null;
        this._open = false;
        this.inputValue = '';
        this.inputSubject = new BehaviorSubject(undefined);
        this.noResults = false;
        this.activeIndex = -1;
        this.pendingFocus = false;
    }
    Object.defineProperty(NglLookup.prototype, "value", {
        set: function (value) {
            if (value !== this.inputSubject.getValue()) {
                this.inputValue = value;
                this.inputSubject.next(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglLookup.prototype, "setPick", {
        set: function (pick) {
            this.inputValue = this.resolveLabel(pick);
            this.pick = pick;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglLookup.prototype, "open", {
        get: function () {
            return this._open;
        },
        set: function (_open) {
            var _this = this;
            if (this.open === _open)
                return;
            if (_open) {
                this.globalClickUnsubscriber = this.renderer.listen('document', 'click', function ($event) {
                    _this.globalClickHandler($event);
                    _this.detector.markForCheck();
                });
            }
            else {
                this.activeIndex = -1;
                this.unsubscribeGlobalClick();
            }
            this._open = _open;
        },
        enumerable: true,
        configurable: true
    });
    NglLookup.prototype.handlePick = function (item) {
        this.pickChange.emit(item);
    };
    NglLookup.prototype.onInputChange = function (value) {
        this.inputSubject.next(value);
    };
    NglLookup.prototype.ngOnInit = function () {
        var _this = this;
        var valueStream = this.inputSubject.skip(1)
            .do(function (value) {
            _this.lastUserInput = value;
            _this.activeIndex = -1;
            _this.valueChange.emit(value);
        });
        if (this.debounce > 0) {
            valueStream = valueStream.debounceTime(this.debounce);
        }
        var suggestions$ = valueStream
            .distinctUntilChanged()
            .switchMap(function (value) {
            var suggestions = _this.lookup(value);
            return suggestions instanceof Observable ? suggestions : Observable.of(suggestions);
        })
            .publish().refCount(); // Single instance
        suggestions$.subscribe(function (suggestions) {
            _this.suggestions = suggestions;
            _this.noResults = Array.isArray(suggestions) && !suggestions.length;
            _this.open = !!suggestions;
            _this.detector.markForCheck();
        });
    };
    NglLookup.prototype.ngOnChanges = function (changes) {
        this._label = this.labelTemplate ? this.labelTemplate.templateRef : (this.label || '');
    };
    NglLookup.prototype.resolveLabel = function (item) {
        return this.field && isObject(item) ? item[this.field] : item;
    };
    NglLookup.prototype.close = function (evt) {
        if (evt === void 0) { evt = null; }
        if (evt) {
            evt.preventDefault();
        }
        this.open = false;
    };
    NglLookup.prototype.globalClickHandler = function ($event) {
        var nativeElement = this.element.nativeElement;
        if ($event.target === nativeElement || nativeElement.contains($event.target)) {
            return;
        }
        this.open = false;
    };
    NglLookup.prototype.optionId = function (index) {
        return index < 0 ? null : this.inputId + "_active_" + index;
    };
    NglLookup.prototype.pickActive = function () {
        if (this.activeIndex < 0)
            return;
        this.handlePick(this.suggestions[this.activeIndex]);
    };
    NglLookup.prototype.moveActive = function (evt, moves) {
        evt.preventDefault();
        if (!this.expanded)
            return;
        this.activeIndex = Math.max(-1, Math.min(this.activeIndex + moves, this.suggestions.length - 1));
        // Update input value based on active option
        var value = this.activeIndex === -1 ? this.lastUserInput : this.resolveLabel(this.suggestions[this.activeIndex]);
        this.inputValue = value;
    };
    NglLookup.prototype.onScopeOpen = function (open) {
        if (open) {
            this.close();
        }
        this.openScope = open;
    };
    NglLookup.prototype.scopeSelect = function (scope) {
        this.openScope = false;
        this.focus();
        this.polymorphic.scopeChange.emit(scope);
    };
    NglLookup.prototype.ngAfterViewChecked = function () {
        if (this.pendingFocus && !this.pick) {
            this.focus();
        }
        this.pendingFocus = false;
    };
    NglLookup.prototype.clear = function () {
        this.pickChange.emit(null);
        this.pendingFocus = true;
    };
    NglLookup.prototype.focus = function () {
        this.inputEl.nativeElement.focus();
    };
    Object.defineProperty(NglLookup.prototype, "expanded", {
        // Whether menu is expanded
        get: function () {
            return this.open && !this.pick;
        },
        enumerable: true,
        configurable: true
    });
    NglLookup.prototype.ngOnDestroy = function () {
        this.unsubscribeGlobalClick();
    };
    NglLookup.prototype.unsubscribeGlobalClick = function () {
        if (!this.globalClickUnsubscriber)
            return;
        this.globalClickUnsubscriber();
        this.globalClickUnsubscriber = null;
    };
    NglLookup.decorators = [
        { type: Component, args: [{
                    selector: 'ngl-lookup',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <div class=\"slds-lookup slds-form-element\" data-select=\"single\" [attr.data-scope]=\"polymorphic ? 'multi' : 'single'\" [class.slds-is-open]=\"expanded\"><label class=\"slds-form-element__label\" *ngIf=\"_label\" [attr.for]=\"inputId\" [nglInternalOutlet]=\"_label\"></label><div class=\"slds-form-element__control\" *ngIf=\"pick\"><div class=\"slds-pill_container\"><ngl-pill (nglPillRemove)=\"clear()\">{{resolveLabel(pick)}}</ngl-pill></div></div><div class=\"slds-form-element__control slds-grid\" *ngIf=\"!pick\" [class.slds-box--border]=\"polymorphic\"><ngl-internal-lookup-scope *ngIf=\"polymorphic\" [open]=\"openScope\" (openChange)=\"onScopeOpen($event)\" [scope]=\"polymorphic\" (scopeChange)=\"scopeSelect($event)\"><ng-content select=\"[nglPolymorphicLabel]\"></ng-content></ngl-internal-lookup-scope><div class=\"slds-input-has-icon slds-grow\" [ngClass]=\"{'slds-input-has-icon--right': searchIcon }\"><svg class=\"slds-input__icon slds-icon-text-default\" nglIcon=\"search\" *ngIf=\"searchIcon\"></svg><input class=\"slds-input slds-lookup__search-input\" #lookupInput [id]=\"inputId\" type=\"text\" aria-autocomplete=\"list\" role=\"combobox\" [attr.aria-expanded]=\"!!expanded\" [attr.aria-activedescendant]=\"optionId(activeIndex)\" [ngModel]=\"inputValue\" (ngModelChange)=\"onInputChange($event)\" (keydown.Esc)=\"close($event)\" [placeholder]=\"placeholder || ''\" (keydown.ArrowDown)=\"moveActive($event, 1)\" (keydown.ArrowUp)=\"moveActive($event, -1)\" (keydown.Enter)=\"pickActive($event)\" [ngClass]=\"{'slds-input': !polymorphic, 'slds-input--bare': polymorphic}\"></div></div><div class=\"slds-lookup__menu\" *ngIf=\"expanded\" role=\"listbox\" [ngSwitch]=\"!!itemTemplate\"><ng-content select=\"[nglLookupHeader]\"></ng-content><ul class=\"slds-lookup__list\" role=\"presentation\" *ngSwitchCase=\"false\"><li *ngIf=\"noResults\"><div class=\"slds-lookup__item--label\">{{noResultsText}}</div></li><li *ngFor=\"let item of suggestions; let i=index\" (click)=\"handlePick(item)\" [ngClass]=\"{'slds-dropdown__item--active': i === activeIndex }\"><a class=\"slds-lookup__item-action\" [id]=\"optionId(i)\" role=\"option\">{{resolveLabel(item)}}</a></li></ul><ul class=\"slds-lookup__list\" role=\"presentation\" *ngSwitchCase=\"true\"><li *ngIf=\"noResults\"><div class=\"slds-lookup__item--label\">{{noResultsText}}</div></li><li *ngFor=\"let item of suggestions; let i=index\" (click)=\"handlePick(item)\" [ngClass]=\"{'slds-dropdown__item--active': i === activeIndex }\"><a class=\"slds-lookup__item-action\" [id]=\"optionId(i)\" role=\"option\"><ng-template [ngTemplateOutlet]=\"itemTemplate.templateRef\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template></a></li></ul></div></div>\n  ",
                    styles: [
                        ".slds-dropdown__item--active > a {\n        outline: 0;\n        text-decoration: none;\n        background-color: #f4f6f9;\n    }",
                    ],
                },] },
    ];
    /** @nocollapse */
    NglLookup.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ChangeDetectorRef, },
    ]; };
    NglLookup.propDecorators = {
        'itemTemplate': [{ type: ContentChild, args: [NglLookupItemTemplate,] },],
        'polymorphic': [{ type: ContentChild, args: [NglLookupScopeItem,] },],
        'placeholder': [{ type: Input },],
        'noResultsText': [{ type: Input },],
        'searchIcon': [{ type: Input },],
        'value': [{ type: Input },],
        'valueChange': [{ type: Output },],
        'lookup': [{ type: Input },],
        'field': [{ type: Input },],
        'setPick': [{ type: Input, args: ['pick',] },],
        'pickChange': [{ type: Output },],
        'label': [{ type: Input },],
        'labelTemplate': [{ type: ContentChild, args: [NglLookupLabelTemplate,] },],
        'inputEl': [{ type: ViewChild, args: ['lookupInput',] },],
        'debounce': [{ type: Input },],
        'open': [{ type: Input },],
    };
    return NglLookup;
}());
export { NglLookup };
//# sourceMappingURL=lookup.js.map