import { EventEmitter, ElementRef, Renderer2, ChangeDetectorRef, TemplateRef, OnChanges } from '@angular/core';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/skip';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/switchMap';
import 'rxjs/add/operator/publish';
import { NglLookupItemTemplate, NglLookupLabelTemplate } from './item';
import { NglLookupScopeItem } from './scope-item';
export declare class NglLookup implements OnChanges {
    private element;
    private renderer;
    private detector;
    itemTemplate: NglLookupItemTemplate;
    polymorphic: NglLookupScopeItem;
    placeholder: string;
    noResultsText: string;
    searchIcon: boolean;
    openScope: boolean;
    value: string;
    valueChange: EventEmitter<string>;
    lookup: Function;
    field: string;
    pick: any;
    setPick: any;
    pickChange: EventEmitter<{}>;
    label: string;
    labelTemplate: NglLookupLabelTemplate;
    inputEl: ElementRef;
    debounce: number;
    inputId: string;
    _label: string | TemplateRef<any>;
    private globalClickUnsubscriber;
    private _open;
    open: boolean;
    private inputValue;
    private inputSubject;
    private suggestions;
    private noResults;
    private activeIndex;
    private lastUserInput;
    private pendingFocus;
    constructor(element: ElementRef, renderer: Renderer2, detector: ChangeDetectorRef);
    handlePick(item: any): void;
    onInputChange(value: string): void;
    ngOnInit(): void;
    ngOnChanges(changes?: any): void;
    resolveLabel(item: any): any;
    close(evt?: KeyboardEvent): void;
    globalClickHandler($event: MouseEvent): void;
    optionId(index: number): string;
    pickActive(): void;
    moveActive(evt: KeyboardEvent, moves: number): void;
    onScopeOpen(open: boolean): void;
    scopeSelect(scope: any): void;
    ngAfterViewChecked(): void;
    clear(): void;
    focus(): void;
    readonly expanded: boolean;
    ngOnDestroy(): void;
    private unsubscribeGlobalClick();
}
