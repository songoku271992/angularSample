import { Component, Input, ElementRef, Renderer2, ChangeDetectionStrategy, Attribute, Optional } from '@angular/core';
import { toBoolean, replaceClass } from '../util/util';
import { NglButton } from '../buttons/button';
import { NglButtonIcon } from '../buttons/button-icon';
var NglIcon = (function () {
    function NglIcon(element, renderer, state, button, nglButton, nglButtonIcon) {
        this.element = element;
        this.renderer = renderer;
        this.state = state;
        this.category = 'utility';
        this.button = button === null ? !!(nglButton || nglButtonIcon) : toBoolean(button);
        if (state) {
            renderer.addClass(element.nativeElement, "slds-text-" + state);
        }
    }
    Object.defineProperty(NglIcon.prototype, "setIcon", {
        set: function (icon) {
            this._icon = icon;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglIcon.prototype, "icon", {
        get: function () {
            return this.category === 'custom' ? "custom" + this._icon : this._icon;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglIcon.prototype, "setCategory", {
        set: function (category) {
            this.category = category || 'utility';
        },
        enumerable: true,
        configurable: true
    });
    NglIcon.prototype.ngOnChanges = function (changes) {
        var containerClass = this.containerClass;
        replaceClass(this, this._containerClass, containerClass);
        this._containerClass = containerClass;
    };
    NglIcon.prototype.svgClasses = function () {
        var classes = Array.isArray(this.svgClass) ? this.svgClass : [this.svgClass || ''];
        var prefix = this.button ? 'slds-button__icon' : 'slds-icon';
        classes.push(this.state ? 'slds-button__icon--stateful' : prefix);
        if (this.size) {
            classes.push(prefix + "--" + this.size);
        }
        if (this.type) {
            classes.push("slds-icon-text-" + this.type);
        }
        if (this.align || this.state) {
            classes.push("slds-button__icon--" + (this.align || 'left'));
        }
        return classes;
    };
    Object.defineProperty(NglIcon.prototype, "containerClass", {
        get: function () {
            return /^(action|custom|standard)$/.test(this.category)
                ? ['slds-icon_container', "slds-icon-" + this.category + "-" + this.icon.replace('_', '-')]
                : null;
        },
        enumerable: true,
        configurable: true
    });
    NglIcon.decorators = [
        { type: Component, args: [{
                    selector: 'ngl-icon, [ngl-icon]',
                    template: "\n    <svg [nglIcon]=\"icon\" [nglIconCategory]=\"category\" [ngClass]=\"svgClasses()\"></svg><span class=\"slds-assistive-text\" *ngIf=\"alt\">{{alt}}</span><ng-content></ng-content>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                },] },
    ];
    /** @nocollapse */
    NglIcon.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: undefined, decorators: [{ type: Attribute, args: ['state',] },] },
        { type: undefined, decorators: [{ type: Attribute, args: ['button',] },] },
        { type: NglButton, decorators: [{ type: Optional },] },
        { type: NglButtonIcon, decorators: [{ type: Optional },] },
    ]; };
    NglIcon.propDecorators = {
        'setIcon': [{ type: Input, args: ['icon',] },],
        'setCategory': [{ type: Input, args: ['category',] },],
        'type': [{ type: Input },],
        'align': [{ type: Input },],
        'size': [{ type: Input },],
        'alt': [{ type: Input },],
        'svgClass': [{ type: Input },],
    };
    return NglIcon;
}());
export { NglIcon };
;
//# sourceMappingURL=icon.js.map