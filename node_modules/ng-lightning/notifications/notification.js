import { Component, Input, Output, EventEmitter, ElementRef, Renderer2, Optional, ChangeDetectionStrategy } from '@angular/core';
import { NglNotificationClose } from './notification-close';
import { replaceClass, isInt } from '../util/util';
var NglNotification = (function () {
    function NglNotification(element, renderer, notificationClose) {
        this.element = element;
        this.renderer = renderer;
        this.type = 'toast';
        this.closeEventEmitter = new EventEmitter();
        this.showClose = false;
        this.currentTimeout = null;
        this.showClose = !!notificationClose;
    }
    Object.defineProperty(NglNotification.prototype, "setSeverity", {
        set: function (severity) {
            this.severity = severity === 'info' ? null : severity;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglNotification.prototype, "timeout", {
        set: function (timeout) {
            var _this = this;
            this.clearTimeout();
            if (isInt(timeout) && timeout >= 0) {
                this.currentTimeout = setTimeout(function () { return _this.close('timeout'); }, +timeout);
            }
        },
        enumerable: true,
        configurable: true
    });
    NglNotification.prototype.ngOnChanges = function (changes) {
        var changedType = changes.type, changedSeverity = changes.setSeverity;
        if (changedType) {
            var previousValue = typeof (changedType.previousValue) === 'string' ? changedType.previousValue : '';
            replaceClass(this, "slds-notify--" + previousValue, "slds-notify--" + changedType.currentValue);
        }
        if (changedSeverity) {
            var previousValue = typeof (changedSeverity.previousValue) === 'string' ? changedSeverity.previousValue : '';
            replaceClass(this, "slds-theme--" + previousValue, changedSeverity.currentValue ? "slds-theme--" + changedSeverity.currentValue : null);
        }
    };
    NglNotification.prototype.close = function (reason, $event) {
        this.clearTimeout();
        if ($event) {
            $event.preventDefault();
            $event.stopPropagation();
        }
        this.closeEventEmitter.emit(reason);
    };
    NglNotification.prototype.ngOnDestroy = function () {
        this.clearTimeout();
    };
    NglNotification.prototype.clearTimeout = function () {
        if (this.currentTimeout !== null) {
            clearTimeout(this.currentTimeout);
            this.currentTimeout = null;
        }
    };
    NglNotification.decorators = [
        { type: Component, args: [{
                    selector: 'ngl-notification',
                    template: "\n    <span class=\"slds-assistive-text\">{{assistiveText || severity || 'Info'}}</span><button class=\"slds-button slds-button--icon-inverse slds-notify__close\" *ngIf=\"showClose\" type=\"button\" (click)=\"close('button', $event)\"><svg class=\"slds-button__icon\" nglIcon=\"close\"></svg><span class=\"slds-assistive-text\">{{closeAssistiveText || 'Close'}}</span></button><ng-content></ng-content>\n  ",
                    host: {
                        '[class.slds-notify]': 'true',
                        'role': 'alert',
                    },
                    styles: [
                        ":host.slds-notify--alert {\n      display: block;\n    }",
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    exportAs: 'nglNotification',
                },] },
    ];
    /** @nocollapse */
    NglNotification.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: NglNotificationClose, decorators: [{ type: Optional },] },
    ]; };
    NglNotification.propDecorators = {
        'type': [{ type: Input },],
        'setSeverity': [{ type: Input, args: ['severity',] },],
        'assistiveText': [{ type: Input },],
        'closeAssistiveText': [{ type: Input },],
        'timeout': [{ type: Input },],
        'closeEventEmitter': [{ type: Output, args: ['nglNotificationClose',] },],
    };
    return NglNotification;
}());
export { NglNotification };
//# sourceMappingURL=notification.js.map