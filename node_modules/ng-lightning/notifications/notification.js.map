{"version":3,"sources":["../../../temp/inline/notifications/notification.ts"],"names":[],"mappings":"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","file":"notification.js","sourceRoot":"","sourcesContent":["import {Component, Input, Output, EventEmitter, OnChanges, ElementRef, Renderer2, Optional, ChangeDetectionStrategy} from '@angular/core';\nimport {NglNotificationClose} from './notification-close';\nimport {replaceClass, isInt} from '../util/util';\n\n\nexport class NglNotification implements OnChanges {\n   type: 'toast' | 'alert' = 'toast';\n   set setSeverity(severity: string) {\n    this.severity = severity === 'info' ? null : severity;\n  }\n   assistiveText: string;\n   closeAssistiveText: string;\n   set timeout(timeout: number) {\n    this.clearTimeout();\n    if (isInt(timeout) && timeout >= 0) {\n      this.currentTimeout = setTimeout(() => this.close('timeout'), +timeout);\n    }\n  }\n\n   closeEventEmitter = new EventEmitter<string>();\n\n  severity: string;\n  showClose = false;\n  private currentTimeout: any = null;\n\n  constructor(public element: ElementRef, public renderer: Renderer2,  notificationClose: NglNotificationClose) {\n    this.showClose = !!notificationClose;\n  }\n\n  ngOnChanges(changes: any) {\n    const {type: changedType, setSeverity: changedSeverity} = changes;\n    if (changedType) {\n      const previousValue = typeof(changedType.previousValue) === 'string' ? changedType.previousValue : '';\n      replaceClass(this, `slds-notify--${previousValue}`, `slds-notify--${changedType.currentValue}`);\n    }\n    if (changedSeverity) {\n      const previousValue = typeof(changedSeverity.previousValue) === 'string' ? changedSeverity.previousValue : '';\n      replaceClass(this, `slds-theme--${previousValue}`, changedSeverity.currentValue ? `slds-theme--${changedSeverity.currentValue}` : null);\n    }\n  }\n\n  close(reason?: string, $event?: Event) {\n    this.clearTimeout();\n    if ($event) {\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n    this.closeEventEmitter.emit(reason);\n  }\n\n  ngOnDestroy() {\n    this.clearTimeout();\n  }\n\n  private clearTimeout() {\n    if (this.currentTimeout !== null) {\n      clearTimeout(this.currentTimeout);\n      this.currentTimeout = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngl-notification',\n  template: `\n    <span class=\"slds-assistive-text\">{{assistiveText || severity || 'Info'}}</span><button class=\"slds-button slds-button--icon-inverse slds-notify__close\" *ngIf=\"showClose\" type=\"button\" (click)=\"close('button', $event)\"><svg class=\"slds-button__icon\" nglIcon=\"close\"></svg><span class=\"slds-assistive-text\">{{closeAssistiveText || 'Close'}}</span></button><ng-content></ng-content>\n  `,\n  host: {\n    '[class.slds-notify]': 'true',\n    'role': 'alert',\n  },\n  styles: [\n    `:host.slds-notify--alert {\n      display: block;\n    }`,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'nglNotification',\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NglNotificationClose, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'type': [{ type: Input },],\n'setSeverity': [{ type: Input, args: ['severity', ] },],\n'assistiveText': [{ type: Input },],\n'closeAssistiveText': [{ type: Input },],\n'timeout': [{ type: Input },],\n'closeEventEmitter': [{ type: Output, args: ['nglNotificationClose', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}