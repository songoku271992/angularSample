{"version":3,"sources":["../../../temp/inline/menus/dropdown-trigger.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,SAAE,EAAU,YAAA,EAAc,UAAA,EAAsB,MAAM,eAAA,CAAgB;AAC7E,OAAO,EAAA,WAAE,EAAW,MAAM,YAAA,CAAa;AAGvC;IAGE,4BAAoB,OAAmB,EAAU,QAAqB;QAAlD,YAAO,GAAP,OAAO,CAAY;QAAU,aAAQ,GAAR,QAAQ,CAAa;QACpE,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9G,CAAC;IAED,wCAAW,GAAX;QACE,IAAI,CAAC,4BAA4B,CAAC,WAAW,EAAE,CAAC;IAClD,CAAC;IAEA,uCAAU,GAAV;QACC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IACzB,CAAC;IAGD,0CAAa,GAAb,UAAc,MAAa;QACzB,MAAM,CAAC,cAAc,EAAE,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,kCAAK,GAAL;QACE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;IACrC,CAAC;IACI,6BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,sBAAsB;oBAChC,IAAI,EAAE;wBACJ,eAAe,EAAE,MAAM;qBACxB;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,iCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;QACpB,EAAC,IAAI,EAAE,WAAW,GAAG;KACpB,EAH6F,CAG7F,CAAC;IACK,iCAAc,GAA2C;QAChE,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,OAAO,EAAG,EAAE,EAAE;QAC1D,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,mBAAmB,EAAE,CAAC,QAAQ,CAAC,EAAG,EAAE,EAAE;KACpF,CAAC;IACF,yBAAC;CAzCD,AAyCC,IAAA;SAzCY,kBAAkB","file":"dropdown-trigger.js","sourceRoot":"","sourcesContent":["import {Directive, HostListener, ElementRef, OnDestroy} from '@angular/core';\nimport {NglDropdown} from './dropdown';\n\n\nexport class NglDropdownTrigger implements OnDestroy {\n  private parentFocusEventSubscription: any;\n\n  constructor(private element: ElementRef, private dropdown: NglDropdown) {\n    this.parentFocusEventSubscription = this.dropdown.triggerFocusEventEmitter.subscribe(this.focus.bind(this));\n  }\n\n  ngOnDestroy() {\n    this.parentFocusEventSubscription.unsubscribe();\n  }\n\n   toggleOpen() {\n    this.dropdown.toggle();\n  }\n\n  \n  onKeyDownOpen($event: Event) {\n    $event.preventDefault();\n    this.dropdown.toggle(true);\n  }\n\n  focus() {\n    this.element.nativeElement.focus();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[nglDropdownTrigger]',\n  host: {\n    'aria-haspopup': 'true',\n  },\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NglDropdown, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'toggleOpen': [{ type: HostListener, args: ['click', ] },],\n'onKeyDownOpen': [{ type: HostListener, args: ['keydown.arrowdown', ['$event'], ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}