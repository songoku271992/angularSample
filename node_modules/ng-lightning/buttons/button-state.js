import { Directive, Input, Output, EventEmitter, HostListener, ElementRef, Renderer2 } from '@angular/core';
import { toBoolean } from '../util/util';
var NglButtonState = (function () {
    function NglButtonState(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.selectedChange = new EventEmitter();
    }
    Object.defineProperty(NglButtonState.prototype, "selected", {
        get: function () {
            return this._selected;
        },
        set: function (_selected) {
            this._selected = toBoolean(_selected);
            this.toggleClass('slds-is-selected', this._selected);
            this.toggleClass('slds-not-selected', !this._selected);
        },
        enumerable: true,
        configurable: true
    });
    NglButtonState.prototype.onSelectChange = function () {
        this.selectedChange.emit(!this.selected);
    };
    NglButtonState.prototype.toggleClass = function (className, isAdd) {
        if (isAdd) {
            this.renderer.addClass(this.element.nativeElement, className);
        }
        else {
            this.renderer.removeClass(this.element.nativeElement, className);
        }
    };
    NglButtonState.decorators = [
        { type: Directive, args: [{
                    selector: '[nglButtonState]',
                    host: {
                        'aria-live': 'assertive',
                    },
                },] },
    ];
    /** @nocollapse */
    NglButtonState.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    NglButtonState.propDecorators = {
        'selected': [{ type: Input, args: ['nglButtonState',] },],
        'selectedChange': [{ type: Output, args: ['nglButtonStateChange',] },],
        'onSelectChange': [{ type: HostListener, args: ['click',] },],
    };
    return NglButtonState;
}());
export { NglButtonState };
;
//# sourceMappingURL=button-state.js.map