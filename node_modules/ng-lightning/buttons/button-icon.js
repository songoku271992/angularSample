import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';
import { replaceClass } from '../util/util';
var DEFAULT_TYPE = 'border';
var NglButtonIcon = (function () {
    function NglButtonIcon(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.renderer.addClass(this.element.nativeElement, 'slds-button');
        this.renderer.addClass(this.element.nativeElement, this.normalize());
    }
    Object.defineProperty(NglButtonIcon.prototype, "nglButtonIcon", {
        set: function (type) {
            replaceClass(this, this.normalize(this._type), this.normalize(type));
            this._type = type;
        },
        enumerable: true,
        configurable: true
    });
    NglButtonIcon.prototype.normalize = function (type) {
        return "slds-button--icon" + (type === "''" ? '' : "-" + (type || DEFAULT_TYPE));
    };
    NglButtonIcon.decorators = [
        { type: Directive, args: [{
                    selector: '[nglButtonIcon]',
                },] },
    ];
    /** @nocollapse */
    NglButtonIcon.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    NglButtonIcon.propDecorators = {
        'nglButtonIcon': [{ type: Input },],
    };
    return NglButtonIcon;
}());
export { NglButtonIcon };
//# sourceMappingURL=button-icon.js.map