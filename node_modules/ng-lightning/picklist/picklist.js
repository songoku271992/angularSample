import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, ViewChild } from '@angular/core';
import 'rxjs/add/operator/filter';
import { NglPicklistItemTemplate } from './item';
import { NglPick } from '../pick/pick';
import { toBoolean } from '../util/util';
var NglPicklist = (function () {
    function NglPicklist(pick) {
        this.pick = pick;
        this.filterPlaceholder = '';
        this.openChange = new EventEmitter();
        this._open = false;
        this._disabled = false;
        this._fluid = false;
        this.filter = '';
        this.filterActiveIndex = 0;
        this.hasFilterFocus = false;
    }
    Object.defineProperty(NglPicklist.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (data) {
            this._data = data;
            this.filterData();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglPicklist.prototype, "fluid", {
        get: function () {
            return this._fluid;
        },
        set: function (fluid) {
            this._fluid = toBoolean(fluid);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglPicklist.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (disabled) {
            this._disabled = toBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglPicklist.prototype, "open", {
        get: function () {
            return this._open;
        },
        set: function (value) {
            var _this = this;
            this._open = value;
            if (this.open && this.hasFilter) {
                setTimeout(function () { return _this.focusFilter(); });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglPicklist.prototype, "hasFilter", {
        get: function () {
            return typeof (this.filterType) !== 'undefined';
        },
        enumerable: true,
        configurable: true
    });
    NglPicklist.prototype.ngAfterContentInit = function () {
        var _this = this;
        this._changeSubscription = this.pick.nglPickChange.filter(function () { return !_this.pick.isMultiple; })
            .subscribe(function () { return _this.openChange.emit(false); });
    };
    NglPicklist.prototype.ngOnDestroy = function () {
        if (this._changeSubscription) {
            this._changeSubscription.unsubscribe();
            this._changeSubscription = null;
        }
    };
    NglPicklist.prototype.filterData = function () {
        this.filteredData = this._filterData();
        this.setFilterActive(); // Keep active index in bounds
    };
    NglPicklist.prototype._filterData = function () {
        var _this = this;
        if (!this.data || !this.hasFilter || !this.filter) {
            return this.data;
        }
        var filter = this.filterType;
        switch (typeof (filter)) {
            case 'string':
                return this.data.filter(function (d) { return (filter ? d[filter] : d.toString()).toLowerCase().indexOf(_this.filter.toLowerCase()) !== -1; });
            case 'function':
                return this.data.filter(filter);
            default:
                throw new Error("Invalid NglPicklist filter type (" + typeof (this.filterType) + "). The filter must be empty, a field name or a filter function.");
        }
    };
    NglPicklist.prototype.isOptionActive = function (index) {
        return this.hasFilter && this.filterActiveIndex === index;
    };
    NglPicklist.prototype.onOptionHover = function (index) {
        if (!this.hasFilterFocus)
            return;
        this.filterActiveIndex = index;
    };
    NglPicklist.prototype.filterChange = function (filter) {
        this.filter = filter;
        this.filterData();
    };
    NglPicklist.prototype.setFilterActive = function (moves, evt) {
        if (moves === void 0) { moves = 0; }
        if (evt) {
            evt.preventDefault();
            evt.stopPropagation();
        }
        this.filterActiveIndex = Math.max(Math.min(this.filterActiveIndex + moves, this.filteredData.length - 1), 0);
    };
    NglPicklist.prototype.onFilterPick = function () {
        if (!this.filteredData.length || this.filterActiveIndex < 0)
            return;
        this.pick.selectOption(this.filteredData[this.filterActiveIndex]);
    };
    NglPicklist.prototype.focusFilter = function () {
        this.filterInput.nativeElement.focus();
    };
    NglPicklist.prototype.onFilterFocus = function () {
        this.filterActiveIndex = 0;
        this.hasFilterFocus = true;
    };
    NglPicklist.prototype.onFilterBlur = function () {
        this.filterActiveIndex = -1;
        this.hasFilterFocus = false;
    };
    NglPicklist.decorators = [
        { type: Component, args: [{
                    selector: 'ngl-picklist[nglPick]',
                    template: "\n    <div class=\"slds-picklist\" nglDropdown [open]=\"open\" (openChange)=\"openChange.emit($event)\" [ngClass]=\"{'slds-picklist--fluid': fluid}\"><button class=\"slds-button slds-button--neutral slds-picklist__label\" type=\"button\" nglDropdownTrigger [disabled]=\"disabled\"><ng-content></ng-content><svg class=\"slds-icon\" nglIcon=\"down\"></svg></button><div class=\"slds-dropdown slds-dropdown--left\" [ngClass]=\"{ 'slds-p-top--none': hasFilter }\"><input class=\"slds-input\" *ngIf=\"hasFilter\" #filterInput type=\"text\" [attr.placeholder]=\"filterPlaceholder\" [ngModel]=\"filter\" (ngModelChange)=\"filterChange($event)\" (keydown.enter)=\"onFilterPick()\" (keydown.arrowdown)=\"setFilterActive(1, $event)\" (keydown.arrowup)=\"setFilterActive(-1, $event)\" (focus)=\"onFilterFocus()\" (blur)=\"onFilterBlur()\"><ul class=\"dropdown__list\" role=\"menu\" [ngClass]=\"dropdownListClass\"><li class=\"slds-dropdown__item\" *ngFor=\"let item of filteredData; let i = index\" [nglPickOption]=\"item\" nglPickActiveClass=\"slds-is-selected\" [class.slds-is-active]=\"isOptionActive(i)\" (mouseover)=\"onOptionHover(i)\"><a role=\"menuitem\" nglDropdownItem><p class=\"slds-truncate\"><svg class=\"slds-icon slds-icon--selected slds-icon--x-small slds-icon-text-default slds-m-right--x-small\" nglIcon=\"check\"></svg><ng-template [ngTemplateOutlet]=\"itemTemplate?.templateRef\" [ngTemplateOutletContext]=\"{$implicit: item}\"></ng-template></p></a></li></ul></div></div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["\n    li.slds-is-active {\n      background-color: #F4F6F9;\n    }",
                    ],
                },] },
    ];
    /** @nocollapse */
    NglPicklist.ctorParameters = function () { return [
        { type: NglPick, },
    ]; };
    NglPicklist.propDecorators = {
        'data': [{ type: Input },],
        'fluid': [{ type: Input },],
        'disabled': [{ type: Input },],
        'dropdownListClass': [{ type: Input },],
        'filterType': [{ type: Input, args: ['filter',] },],
        'filterPlaceholder': [{ type: Input },],
        'open': [{ type: Input },],
        'openChange': [{ type: Output },],
        'itemTemplate': [{ type: ContentChild, args: [NglPicklistItemTemplate,] },],
        'filterInput': [{ type: ViewChild, args: ['filterInput',] },],
    };
    return NglPicklist;
}());
export { NglPicklist };
//# sourceMappingURL=picklist.js.map