import { Directive, Input, HostListener, ElementRef, Renderer2 } from '@angular/core';
import { NglPick } from './pick';
var NglPickOption = (function () {
    function NglPickOption(element, renderer, nglPick) {
        this.element = element;
        this.renderer = renderer;
        this.nglPick = nglPick;
        this._active = false;
    }
    Object.defineProperty(NglPickOption.prototype, "active", {
        // Use a getter to prevent direct altering
        get: function () {
            return this._active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglPickOption.prototype, "setValue", {
        set: function (value) {
            this._value = value;
        },
        enumerable: true,
        configurable: true
    });
    NglPickOption.prototype.pick = function (evt) {
        if (evt) {
            evt.preventDefault();
        }
        this.nglPick.selectOption(this._value);
    };
    NglPickOption.prototype.ngOnInit = function () {
        var _this = this;
        this._subscription = this.nglPick.values.subscribe(function (value) {
            _this._active = _this._isActive(value);
            var activeClass = _this.nglPickActiveClass || _this.nglPick.nglPickActiveClass;
            if (activeClass) {
                if (_this.active) {
                    _this.renderer.addClass(_this.element.nativeElement, activeClass);
                }
                else {
                    _this.renderer.removeClass(_this.element.nativeElement, activeClass);
                }
            }
        });
    };
    NglPickOption.prototype.ngOnDestroy = function () {
        this._subscription.unsubscribe();
        this.nglPick.optionRemoved(this._value);
    };
    NglPickOption.prototype._isActive = function (value) {
        if (this.nglPick.isMultiple) {
            if (!value)
                return false;
            return Array.isArray(value) ? value.indexOf(this._value) > -1 : !!value[this._value];
        }
        else {
            return this._value === value;
        }
    };
    NglPickOption.decorators = [
        { type: Directive, args: [{
                    selector: '[nglPickOption]',
                    exportAs: 'nglPickOption',
                    host: {
                        'role': 'button',
                    },
                },] },
    ];
    /** @nocollapse */
    NglPickOption.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: NglPick, },
    ]; };
    NglPickOption.propDecorators = {
        'setValue': [{ type: Input, args: ['nglPickOption',] },],
        'nglPickActiveClass': [{ type: Input },],
        'pick': [{ type: HostListener, args: ['click',] }, { type: HostListener, args: ['keydown.Space', ['$event'],] }, { type: HostListener, args: ['keydown.Enter', ['$event'],] },],
    };
    return NglPickOption;
}());
export { NglPickOption };
//# sourceMappingURL=pick-option.js.map