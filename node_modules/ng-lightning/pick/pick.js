import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { toBoolean } from '../util/util';
var NglPick = (function () {
    function NglPick() {
        this.values = new BehaviorSubject(null);
        this.isMultiple = false;
        this.nglPickChange = new EventEmitter();
        this.nglOptionDestroyed = new EventEmitter();
    }
    Object.defineProperty(NglPick.prototype, "setSelected", {
        set: function (selected) {
            this.selected = selected;
            this.ngAfterContentInit();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglPick.prototype, "setIsMultiple", {
        set: function (isMultiple) {
            this.isMultiple = toBoolean(isMultiple);
        },
        enumerable: true,
        configurable: true
    });
    NglPick.prototype.ngAfterContentInit = function () {
        this.values.next(this.selected);
    };
    NglPick.prototype.selectOption = function (value) {
        var next;
        if (this.isMultiple) {
            if (Array.isArray(this.selected)) {
                // Remove if already there or add to selection
                var index = this.selected.indexOf(value);
                next = index > -1
                    ? this.selected.slice(0, index).concat(this.selected.slice(index + 1)) : this.selected.concat([value]);
            }
            else {
                next = Object.assign({}, this.selected, (_a = {}, _a[value] = !this.selected[value], _a));
            }
        }
        else {
            next = value;
        }
        this.nglPickChange.emit(next);
        var _a;
    };
    NglPick.prototype.optionRemoved = function (value) {
        var _this = this;
        if (this.isMultiple && !this.selected)
            return;
        var emit;
        if (this.isMultiple) {
            emit = Array.isArray(this.selected) ? this.selected.indexOf(value) > -1 : !!this.selected[value];
        }
        else {
            emit = this.selected === value;
        }
        if (emit) {
            setTimeout(function () { return _this.nglOptionDestroyed.emit(value); });
        }
    };
    NglPick.decorators = [
        { type: Directive, args: [{
                    selector: '[nglPick]',
                },] },
    ];
    /** @nocollapse */
    NglPick.ctorParameters = function () { return []; };
    NglPick.propDecorators = {
        'setSelected': [{ type: Input, args: ['nglPick',] },],
        'nglPickActiveClass': [{ type: Input },],
        'nglPickChange': [{ type: Output },],
        'nglOptionDestroyed': [{ type: Output },],
        'setIsMultiple': [{ type: Input, args: ['nglPickMultiple',] },],
    };
    return NglPick;
}());
export { NglPick };
//# sourceMappingURL=pick.js.map