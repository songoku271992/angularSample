import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Renderer2, HostListener, HostBinding } from '@angular/core';
import { replaceClass, toBoolean, uniqueId } from '../util/util';
var NglPopover = (function () {
    function NglPopover(element, renderer, changeDetector) {
        this.element = element;
        this.renderer = renderer;
        this.changeDetector = changeDetector;
        this.afterViewInit = new EventEmitter();
        this.onInteraction = new EventEmitter();
        this.uid = uniqueId('popover');
        this.renderer.addClass(this.element.nativeElement, 'slds-popover');
        // Prevent position changes of "close by" elements
        this.renderer.setStyle(this.element.nativeElement, 'position', 'absolute');
        this.renderer.setAttribute(this.element.nativeElement, 'aria-describedby', this.uid);
    }
    Object.defineProperty(NglPopover.prototype, "theme", {
        set: function (theme) {
            replaceClass(this, "slds-theme--" + this._theme, theme ? "slds-theme--" + theme : '');
            this._theme = theme;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglPopover.prototype, "nglTooltip", {
        set: function (isTooltip) {
            this.renderer[toBoolean(isTooltip) ? 'addClass' : 'removeClass'](this.element.nativeElement, 'slds-popover--tooltip');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglPopover.prototype, "nubbin", {
        set: function (direction) {
            replaceClass(this, "slds-nubbin--" + this._nubbin, direction ? "slds-nubbin--" + direction : '');
            this._nubbin = direction;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglPopover.prototype, "labelledby", {
        get: function () {
            return this.header ? this.uid + "-heading" : null;
        },
        enumerable: true,
        configurable: true
    });
    NglPopover.prototype.ngAfterViewInit = function () {
        this.afterViewInit.emit();
    };
    NglPopover.prototype.interactiveHandler = function (evt, isEnter) {
        this.onInteraction.emit(isEnter);
    };
    NglPopover.decorators = [
        { type: Component, args: [{
                    selector: 'ngl-popover',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <header class=\"slds-popover__header\" *ngIf=\"header\"><h2 class=\"slds-text-heading--small\" [id]=\"uid + '-heading'\">{{header}}</h2></header><div class=\"slds-popover__body\" [id]=\"uid\"><ng-content></ng-content></div><footer class=\"slds-popover__footer\" *ngIf=\"footer\">{{footer}}</footer>\n  ",
                },] },
    ];
    /** @nocollapse */
    NglPopover.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ChangeDetectorRef, },
    ]; };
    NglPopover.propDecorators = {
        'afterViewInit': [{ type: Output },],
        'onInteraction': [{ type: Output },],
        'header': [{ type: Input },],
        'footer': [{ type: Input },],
        'theme': [{ type: Input },],
        'nglTooltip': [{ type: Input },],
        'labelledby': [{ type: HostBinding, args: ['attr.aria-labelledby',] },],
        'interactiveHandler': [{ type: HostListener, args: ['mouseenter', ['$event', 'true'],] }, { type: HostListener, args: ['mouseleave', ['$event', 'false'],] },],
    };
    return NglPopover;
}());
export { NglPopover };
//# sourceMappingURL=popover.js.map