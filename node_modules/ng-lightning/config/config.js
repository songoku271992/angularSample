import { Injectable, EventEmitter, InjectionToken, Inject } from '@angular/core';
export var NGL_CONFIG = new InjectionToken('NGL_CONFIG');
var NglConfig = (function () {
    function NglConfig(config) {
        if (config === void 0) { config = null; }
        this._emitter = new EventEmitter();
        this.values = {
            svgPath: 'assets/icons',
            ratingColorOn: '#FFB75D',
            ratingColorOff: '#54698D',
        };
        this.values = Object.assign({}, this.values, config || {});
    }
    NglConfig.prototype.update = function (config) {
        this.values = Object.assign({}, this.values, config || {});
        this._emitter.emit();
    };
    NglConfig.prototype.get = function (key) {
        return this.values[key];
    };
    NglConfig.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NglConfig.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGL_CONFIG,] },] },
    ]; };
    return NglConfig;
}());
export { NglConfig };
// Intrenal decorator
export function NglConfigurable(config) {
    if (config === void 0) { config = { changeDetectorProperty: 'cd' }; }
    return function (constructor) {
        var _a = constructor.prototype, ngOnInit = _a.ngOnInit, ngOnDestroy = _a.ngOnDestroy;
        constructor.prototype.ngOnInit = function () {
            var _this = this;
            var changeDetectorRef = this[config.changeDetectorProperty];
            if (!changeDetectorRef || !changeDetectorRef.markForCheck) {
                throw Error("NglConfig: invalid ChangeDetectorRef at property \"" + config.changeDetectorProperty + "\"");
            }
            this.nglConfigSubscription = this.config._emitter.subscribe(function () {
                if (_this.nglOnConfigChanges) {
                    _this.nglOnConfigChanges();
                }
                changeDetectorRef.markForCheck();
            });
            if (ngOnInit) {
                ngOnInit.call(this);
            }
        };
        constructor.prototype.ngOnDestroy = function () {
            if (this.nglConfigSubscription) {
                this.nglConfigSubscription.unsubscribe();
                this.nglConfigSubscription = null;
            }
            if (ngOnDestroy) {
                ngOnDestroy.call(this);
            }
        };
    };
}
;
//# sourceMappingURL=config.js.map