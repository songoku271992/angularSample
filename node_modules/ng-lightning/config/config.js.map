{"version":3,"sources":["../../../temp/inline/config/config.ts"],"names":[],"mappings":"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","file":"config.js","sourceRoot":"","sourcesContent":["import {Injectable, EventEmitter, InjectionToken, Inject} from '@angular/core';\nimport {INglConfig} from './config.interface';\n\nexport const NGL_CONFIG = new InjectionToken('NGL_CONFIG');\n\n\nexport class NglConfig {\n\n  _emitter = new EventEmitter();\n\n  private values: INglConfig = {\n    svgPath: 'assets/icons',\n    ratingColorOn: '#FFB75D',\n    ratingColorOff: '#54698D',\n  };\n\n  constructor( config: INglConfig = null) {\n    this.values = Object.assign({}, this.values, config || {});\n  }\n\n  update(config: INglConfig) {\n    this.values = Object.assign({}, this.values, config || {});\n    this._emitter.emit();\n  }\n\n  get(key: string) {\n    return (<any>this.values)[key];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [NGL_CONFIG, ] }, ]},\n];\n}\n\n// Intrenal decorator\nexport function NglConfigurable(config = {changeDetectorProperty: 'cd'}) {\n  return function (constructor: Function) {\n    let { ngOnInit, ngOnDestroy } = constructor.prototype;\n\n    constructor.prototype.ngOnInit = function() {\n      const changeDetectorRef = this[config.changeDetectorProperty];\n\n      if (!changeDetectorRef || !changeDetectorRef.markForCheck) {\n        throw Error(`NglConfig: invalid ChangeDetectorRef at property \"${config.changeDetectorProperty}\"`);\n      }\n\n      this.nglConfigSubscription = this.config._emitter.subscribe(() => {\n        if (this.nglOnConfigChanges) {\n          this.nglOnConfigChanges();\n        }\n        changeDetectorRef.markForCheck();\n      });\n\n      if (ngOnInit) {\n        ngOnInit.call(this);\n      }\n    };\n\n    constructor.prototype.ngOnDestroy = function() {\n      if (this.nglConfigSubscription) {\n        this.nglConfigSubscription.unsubscribe();\n        this.nglConfigSubscription = null;\n      }\n\n      if (ngOnDestroy) {\n        ngOnDestroy.call(this);\n      }\n    };\n  };\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}