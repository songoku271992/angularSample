{"version":3,"sources":["../../../temp/inline/images/avatar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,SAAE,EAAU,KAAA,EAAO,uBAAA,EAAyB,UAAA,EAAY,SAAA,EAAU,MAAM,eAAA,CAAgB;AAC/F,OAAO,EAAA,YAAE,EAAY,MAAM,cAAA,CAAe;AAG1C;IAiBE,mBAAmB,OAAmB,EAAS,QAAmB;QAA/C,YAAO,GAAP,OAAO,CAAY;QAAS,aAAQ,GAAR,QAAQ,CAAW;QAhBjE,QAAG,GAAW,EAAE,CAAC;QACjB,QAAG,GAAW,EAAE,CAAC;QAgBhB,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;IAC1D,CAAC;IAfA,sBAAI,8BAAO;aAAX,UAAY,KAAa;YACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACpC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,CAAC;;;OAAA;IAEA,sBAAI,8BAAO;aAAX,UAAY,KAAa;YACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACpC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,CAAC;;;OAAA;IASD,4BAAQ,GAAR;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,wBAAwB,CAAC,CAAC;QAC/E,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,qBAAqB,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;IAEO,+BAAW,GAAnB,UAAoB,QAAgB,EAAE,QAAgB;QACpD,YAAY,CAAC,IAAI,EAAE,kBAAgB,QAAU,EAAE,QAAQ,GAAG,kBAAgB,QAAU,GAAG,EAAE,CAAC,CAAC;IAC7F,CAAC;IACI,oBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,YAAY;oBACtB,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,QAAQ,EAAE,6CAET;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,wBAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;QACpB,EAAC,IAAI,EAAE,SAAS,GAAG;KAClB,EAH6F,CAG7F,CAAC;IACK,wBAAc,GAA2C;QAChE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACzB,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACzB,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,MAAM,EAAG,EAAE,EAAE;QAC/C,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,MAAM,EAAG,EAAE,EAAE;KAC9C,CAAC;IACF,gBAAC;CAtDD,AAsDC,IAAA;SAtDY,SAAS;AAsDrB,CAdC","file":"avatar.js","sourceRoot":"","sourcesContent":["import {Component, Input, ChangeDetectionStrategy, ElementRef, Renderer2} from '@angular/core';\nimport {replaceClass} from '../util/util';\n\n\nexport class NglAvatar {\n   src: string = '';\n   alt: string = '';\n\n   set setSize(value: string) {\n    this.updateClass(this._size, value);\n    this._size = value;\n  }\n\n   set setType(value: string) {\n    this.updateClass(this._type, value);\n    this._type = value;\n  }\n\n  private _type: string;\n  private _size: string;\n\n  constructor(public element: ElementRef, public renderer: Renderer2) {\n    renderer.addClass(element.nativeElement, 'slds-avatar');\n  }\n\n  ngOnInit() {\n    if (!this._type) {\n      this.renderer.addClass(this.element.nativeElement, 'slds-avatar--rectangle');\n    }\n\n    if (!this._size) {\n      this.renderer.addClass(this.element.nativeElement, 'slds-avatar--medium');\n    }\n  }\n\n  private updateClass(oldValue: string, newValue: string) {\n    replaceClass(this, `slds-avatar--${oldValue}`, newValue ? `slds-avatar--${newValue}` : '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngl-avatar',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <img [src]=\"src\" [alt]=\"alt\">\n  `,\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'src': [{ type: Input },],\n'alt': [{ type: Input },],\n'setSize': [{ type: Input, args: ['size', ] },],\n'setType': [{ type: Input, args: ['type', ] },],\n};\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}