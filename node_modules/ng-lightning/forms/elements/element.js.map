{"version":3,"sources":["../../../../temp/inline/forms/elements/element.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,SAAE,EAAU,KAAA,EAAO,uBAAA,EAAyB,iBAAA,EAAmB,YAAA,EAAuD,MAAM,eAAA,CAAgB;AACnJ,OAAO,EAAA,QAAE,EAAS,SAAA,EAAU,MAAM,iBAAA,CAAkB;AACpD,OAAO,EAAA,YAAE,EAAY,MAAM,SAAA,CAAU;AACrC,OAAO,EAAA,oBAAE,EAAqB,YAAA,EAAa,MAAM,eAAA,CAAgB;AAGjE;IAcE,wBAAsB,QAA2B;QAA3B,aAAQ,GAAR,QAAQ,CAAmB;QANjD,QAAG,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC;QAE/B,aAAQ,GAAG,KAAK,CAAC;IAImC,CAAC;IAErD,oCAAW,GAAX,UAAY,OAAa;QACvB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAED,2CAAkB,GAAlB;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACpB,MAAM,KAAK,CAAC,sGAAsG,CAAC,CAAC;QACtH,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;QAC7B,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,oCAAW,GAAX,UAAY,QAA0B;QACpC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;IAC/B,CAAC;IAES,wCAAe,GAAzB;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;YAAC,MAAM,CAAC;QAC5B,IAAI,CAAC,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,GAAG,WAAS,IAAI,CAAC,GAAK,GAAG,IAAI,CAAC;IACvE,CAAC;IAES,qCAAY,GAAtB;QACE,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3D,CAAC;IACI,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,kBAAkB;oBAC5B,QAAQ,EAAE,gXAET;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,IAAI,EAAE;wBACJ,2BAA2B,EAAE,MAAM;wBACnC,wBAAwB,EAAE,SAAS;qBACpC;oBACD,MAAM,EAAE,CAAC,2BAA2B,CAAC;iBACtC,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,6BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,iBAAiB,GAAG;KAC1B,EAF6F,CAE7F,CAAC;IACK,6BAAc,GAA2C;QAChE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,YAAY,EAAG,EAAE,EAAE;QAC9D,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,OAAO,EAAG,EAAE,EAAE;QACjD,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,oBAAoB,EAAG,EAAE,EAAE;QACrE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KAC1B,CAAC;IACF,qBAAC;CAnED,AAmEC,IAAA;SAnEY,cAAc;AAmE1B,CAbC","file":"element.js","sourceRoot":"","sourcesContent":["import {Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, ContentChild, TemplateRef, OnChanges, AfterContentInit} from '@angular/core';\nimport {uniqueId, toBoolean} from '../../util/util';\nimport {NglFormInput} from './input';\nimport {NglFormLabelTemplate, getFormLabel} from '../form-label';\n\n\nexport class NglFormElement implements OnChanges, AfterContentInit {\n   contentEl: NglFormInput;\n\n   labelStr: string;\n   labelTpl: NglFormLabelTemplate;\n\n   error: string;\n\n  uid = uniqueId('form_element');\n\n  required = false;\n\n  _label: TemplateRef<any> | string;\n\n  constructor(protected detector: ChangeDetectorRef) {}\n\n  ngOnChanges(changes?: any) {\n    this.setFormLabel();\n    this.setInputErrorId();\n  }\n\n  ngAfterContentInit() {\n    if (!this.contentEl) {\n      throw Error(`Couldn't find an input, textarea or select with [nglFormControl] attribute inside <ngl-form-element>`);\n    }\n    this.contentEl.id = this.uid;\n    this.setInputErrorId();\n    this.setFormLabel();\n  }\n\n  setRequired(required: string | boolean) {\n    this.required = toBoolean(required);\n    this.detector.markForCheck();\n  }\n\n  protected setInputErrorId() {\n    if (!this.contentEl) return;\n    this.contentEl.describedBy = this.error ? `error_${this.uid}` : null;\n  }\n\n  protected setFormLabel() {\n    this._label = getFormLabel(this.labelStr, this.labelTpl);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngl-form-element',\n  template: `\n    <label class=\"slds-form-element__label\" [attr.for]=\"uid\"><abbr class=\"slds-required\" *ngIf=\"required\" title=\"required\">*</abbr><span [nglInternalOutlet]=\"_label\"></span></label><div class=\"slds-form-element__control\"><ng-content></ng-content></div><div class=\"slds-form-element__help\" *ngIf=\"error\" [id]=\"'error_' + uid\">{{error}}</div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.slds-form-element]': 'true',\n    '[class.slds-has-error]': '!!error',\n  },\n  styles: [`:host { display: block; }`],\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'contentEl': [{ type: ContentChild, args: [NglFormInput, ] },],\n'labelStr': [{ type: Input, args: ['label', ] },],\n'labelTpl': [{ type: ContentChild, args: [NglFormLabelTemplate, ] },],\n'error': [{ type: Input },],\n};\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}