import { Component, Input, ChangeDetectionStrategy, HostBinding, ContentChild } from '@angular/core';
import { uniqueId } from '../../util/util';
import { NglFormLabelTemplate, getFormLabel } from '../form-label';
var NglFormGroup = (function () {
    function NglFormGroup() {
        this.uid = uniqueId('form_group');
    }
    NglFormGroup.prototype.ngOnChanges = function (changes) {
        this.setFormLabel();
    };
    NglFormGroup.prototype.ngAfterContentInit = function () {
        this.setFormLabel();
    };
    NglFormGroup.prototype.setFormLabel = function () {
        this._label = getFormLabel(this.labelStr, this.labelTpl);
    };
    NglFormGroup.decorators = [
        { type: Component, args: [{
                    selector: 'fieldset[ngl-form-group]',
                    template: "\n    <legend class=\"slds-form-element__label\"><abbr class=\"slds-required\" *ngIf=\"required\" title=\"required\">*</abbr><span [nglInternalOutlet]=\"_label\"></span></legend><div class=\"slds-form-element__control\"><ng-content></ng-content></div><div class=\"slds-form-element__help\" *ngIf=\"error\">{{error}}</div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.slds-form-element]': 'true',
                    },
                },] },
    ];
    /** @nocollapse */
    NglFormGroup.ctorParameters = function () { return []; };
    NglFormGroup.propDecorators = {
        'labelStr': [{ type: Input, args: ['label',] },],
        'labelTpl': [{ type: ContentChild, args: [NglFormLabelTemplate,] },],
        'error': [{ type: HostBinding, args: ['class.slds-has-error',] }, { type: Input },],
        'required': [{ type: Input },],
    };
    return NglFormGroup;
}());
export { NglFormGroup };
;
//# sourceMappingURL=group.js.map