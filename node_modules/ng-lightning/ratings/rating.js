var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Component, Input, ChangeDetectionStrategy, Output, EventEmitter, HostListener, HostBinding, ContentChild, ViewChild, ChangeDetectorRef } from '@angular/core';
import { NglRatingIconTemplate } from './icons';
import { NglConfig, NglConfigurable } from '../config/config';
import { toBoolean } from '../util/util';
var NglRating = (function () {
    function NglRating(config, cd) {
        this.config = config;
        this.cd = cd;
        this.range = [];
        this.icon = 'favorite';
        this.rateChange = new EventEmitter();
        this.hover = new EventEmitter();
        this._max = 5;
        this.readonly = false;
        this.nglOnConfigChanges();
    }
    Object.defineProperty(NglRating.prototype, "isReadonly", {
        set: function (readonly) {
            this.readonly = toBoolean(readonly);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglRating.prototype, "rate", {
        set: function (rate) {
            this.inputRate = rate;
            this.currentRate = rate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglRating.prototype, "max", {
        get: function () {
            return this._max;
        },
        set: function (max) {
            this._max = +max;
            this.setRange();
        },
        enumerable: true,
        configurable: true
    });
    NglRating.prototype.ngOnInit = function () {
        this.setRange();
    };
    NglRating.prototype.ngAfterContentInit = function () {
        this._template = this.iconTemplate ? this.iconTemplate.templateRef : this.defaultTemplate;
    };
    NglRating.prototype.nglOnConfigChanges = function () {
        this.colorOn = this.config.get('ratingColorOn');
        this.colorOff = this.config.get('ratingColorOff');
    };
    NglRating.prototype.update = function (value) {
        if (value < 1 || value > this.max || this.readonly || value === this.inputRate)
            return;
        this.rateChange.emit(value);
    };
    NglRating.prototype.enter = function (value) {
        if (this.readonly)
            return;
        this.currentRate = value;
        this.hover.emit(value);
    };
    NglRating.prototype.getFill = function (value) {
        if (value <= this.currentRate) {
            return 100;
        }
        if (Math.ceil(this.currentRate) < value) {
            return 0;
        }
        return Math.round(100 * (this.currentRate % 1));
    };
    NglRating.prototype.reset = function () {
        this.currentRate = this.inputRate;
    };
    // Keyboard interactions
    NglRating.prototype.keyboardIncrease = function (evt) {
        evt.preventDefault();
        this.update(this.inputRate + 1);
    };
    NglRating.prototype.keyboardDecrease = function (evt) {
        evt.preventDefault();
        this.update(this.inputRate - 1);
    };
    Object.defineProperty(NglRating.prototype, "ariaValuenow", {
        // ARIA
        get: function () {
            return this.inputRate;
        },
        enumerable: true,
        configurable: true
    });
    NglRating.prototype.setRange = function () {
        this.range = Array.apply(null, { length: this.max }).map(function (value, index) { return index + 1; });
    };
    NglRating.decorators = [
        { type: Component, args: [{
                    selector: 'ngl-rating',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <ng-template #t let-fill=\"fill\"><svg class=\"slds-icon\" [nglIcon]=\"icon\" [ngClass]=\"size ? 'slds-icon--' + size : ''\" [style.fill]=\"fill === 100 ? colorOn : colorOff\"></svg><svg class=\"slds-icon\" *ngIf=\"fill &gt; 0 &amp;&amp; fill &lt; 100\" [nglIcon]=\"icon\" [ngClass]=\"size ? 'slds-icon--' + size : ''\" [style.fill]=\"colorOn\" style=\"position:absolute; bottom:0\" [style.left.%]=\"fill - 100\" [xPos]=\"(100 - fill) + '%'\"></svg></ng-template><div class=\"slds-show--inline-block\" *ngFor=\"let r of range; let i = index\" (click)=\"update(r)\" (mouseenter)=\"enter(r)\" style=\"position: relative\"><ng-template [ngTemplateOutlet]=\"_template\" [ngTemplateOutletContext]=\"{$implicit: r &lt;= currentRate, index: i, fill: getFill(r)}\"></ng-template></div>\n  ",
                    host: {
                        'style': 'white-space: nowrap;',
                        'tabindex': '0',
                        'aria-valuemin': '0',
                        '[attr.aria-valuemax]': 'max',
                    },
                },] },
    ];
    /** @nocollapse */
    NglRating.ctorParameters = function () { return [
        { type: NglConfig, },
        { type: ChangeDetectorRef, },
    ]; };
    NglRating.propDecorators = {
        'icon': [{ type: Input },],
        'size': [{ type: Input },],
        'isReadonly': [{ type: Input },],
        'rate': [{ type: Input },],
        'defaultTemplate': [{ type: ViewChild, args: ['t',] },],
        'iconTemplate': [{ type: ContentChild, args: [NglRatingIconTemplate,] },],
        'max': [{ type: Input },],
        'colorOn': [{ type: Input },],
        'colorOff': [{ type: Input },],
        'rateChange': [{ type: Output },],
        'hover': [{ type: Output },],
        'reset': [{ type: HostListener, args: ['mouseleave',] },],
        'keyboardIncrease': [{ type: HostListener, args: ['keydown.ArrowUp', ['$event'],] }, { type: HostListener, args: ['keydown.ArrowRight', ['$event'],] },],
        'keyboardDecrease': [{ type: HostListener, args: ['keydown.ArrowDown', ['$event'],] }, { type: HostListener, args: ['keydown.ArrowLeft', ['$event'],] },],
        'ariaValuenow': [{ type: HostBinding, args: ['attr.aria-valuenow',] },],
    };
    NglRating = __decorate([
        NglConfigurable()
    ], NglRating);
    return NglRating;
}());
export { NglRating };
;
//# sourceMappingURL=rating.js.map