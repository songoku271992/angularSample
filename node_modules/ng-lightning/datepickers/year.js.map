{"version":3,"sources":["../../../temp/inline/datepickers/year.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,SAAE,EAAU,KAAA,EAAO,MAAA,EAAQ,YAAA,EAAc,uBAAA,EAAwB,MAAM,eAAA,CAAgB;AAG9F;IAAA;QAEE,6EAA6E;QAC5E,mBAAc,GAAW,GAAG,CAAC;QAC7B,kBAAa,GAAW,EAAE,CAAC;QAM3B,eAAU,GAAG,IAAI,YAAY,EAAE,CAAC;IA8BnC,CAAC;IAjCE,sBAAI,sCAAO;aAAX,UAAY,IAAqB;YAChC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC;QACpB,CAAC;;;OAAA;IAGD,sBAAI,oCAAK;aAAT;YACE,IAAM,WAAW,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/C,IAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YACzE,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;YAC/E,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAC,MAAM,EAAE,IAAI,GAAG,CAAC,EAAC,CAAC,CAAC,GAAG,CAAC,UAAC,KAAU,EAAE,KAAa,IAAK,OAAA,SAAS,GAAG,KAAK,EAAjB,CAAiB,CAAC,CAAC;QACrG,CAAC;;;OAAA;IAED,kCAAM,GAAN,UAAO,MAAc;QACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IACI,4BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,eAAe;oBACzB,QAAQ,EAAE,qNAET;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,gCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,gCAAc,GAA2C;QAChE,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACpC,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACnC,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,MAAM,EAAG,EAAE,EAAE;QAC/C,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;KAChC,CAAC;IACF,wBAAC;CAxCD,AAwCC,IAAA;SAxCY,iBAAiB","file":"year.js","sourceRoot":"","sourcesContent":["import {Component, Input, Output, EventEmitter, ChangeDetectionStrategy} from '@angular/core';\n\n\nexport class NglDatepickerYear {\n\n  // How many years before and after the current one are selectable in dropdown\n   numYearsBefore: number = 100;\n   numYearsAfter: number = 10;\n\n  year: number;\n   set setYear(year: string | number) {\n    this.year = +year;\n  }\n   yearChange = new EventEmitter();\n\n  get range(): number[] {\n    const currentYear = (new Date()).getFullYear();\n    const firstYear = Math.min(currentYear - this.numYearsBefore, this.year);\n    const size = Math.max(currentYear + this.numYearsAfter, this.year) - firstYear;\n    return Array.apply(null, {length: size + 1}).map((value: any, index: number) => firstYear + index);\n  }\n\n  change($event: string) {\n    this.yearChange.emit($event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngl-date-year',\n  template: `\n    <div class=\"slds-select_container\"><select class=\"slds-select\" [ngModel]=\"year\" (ngModelChange)=\"change($event)\"><option *ngFor=\"let yr of range\" [value]=\"yr\">{{yr}}</option></select></div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'numYearsBefore': [{ type: Input },],\n'numYearsAfter': [{ type: Input },],\n'setYear': [{ type: Input, args: ['year', ] },],\n'yearChange': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}